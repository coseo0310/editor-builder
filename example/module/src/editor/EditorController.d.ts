import EventHandler, { IEventHandler } from "./EventHandler";
import { EditorTypes } from "./types";
declare type Field = EditorTypes.Field;
declare type DrawType = EditorTypes.DrawType;
declare type Event = EditorTypes.Event;
declare type DrawCallback = EditorTypes.DrawCallback;
declare type FitType = EditorTypes.FitType;
declare type ScrollType = EditorTypes.ScrollType;
interface Options {
    canvas?: HTMLCanvasElement;
    isReadonly?: boolean;
}
export interface IEditorContorller extends IEventHandler {
    setImgUrl: (url: string) => Promise<void>;
    setZoomInOut: (depth: number) => Promise<void>;
    setRotate: (deg: number) => Promise<void>;
    setDraw: (drawType: DrawType, field?: Field) => Promise<void>;
    getCanvas: () => HTMLCanvasElement | null;
    getMargin: () => number;
    setIsReadonly: (isText: boolean) => Promise<void>;
    setIsText: (isText: boolean) => Promise<void>;
    setIsIdx: (isIdx: boolean) => Promise<void>;
    setField: (field: Field) => Promise<void>;
    setMaxScale: (s: number) => Promise<void>;
    setMinScale: (s: number) => Promise<void>;
    modifyField: (field: Field) => Promise<void>;
    setSection: (field: Field) => Promise<void>;
    setSections: (fields: Field[]) => Promise<void>;
    setSectionField: (n: number) => Promise<void>;
    setSectionDraw: (b: boolean) => Promise<void>;
    setSectionControl: (b: boolean) => Promise<void>;
    setCalculatedScale: (fit: FitType, isScroll?: boolean) => Promise<void>;
    setScroll: (type: ScrollType) => void;
    setEditField: (id: string) => Promise<void>;
    getFields: () => Field[];
    getSections: () => Field[];
    getSectionIdx: () => number;
    getSectionLength: () => number;
    getSectionField: () => Field | null;
    getEditField: () => Field | null;
    getDeg: () => number;
    getIsIdx: () => boolean;
    getIsText: () => boolean;
    clearEditField: () => Promise<void>;
    clearSectionField: () => Promise<void>;
    removeField: (id: string) => void;
    removeFields: () => void;
    removeSection: (id: string) => void;
    removeSections: () => void;
    downloadImage: () => void;
    addEventListener: (e: Event, c: DrawCallback) => void;
}
export default class EditorContorller extends EventHandler implements IEditorContorller {
    constructor(options?: Options);
    getCanvas(): HTMLCanvasElement;
    setImgUrl(url: string): Promise<void>;
    setMaxScale(s: number): Promise<void>;
    setMinScale(s: number): Promise<void>;
    setIsReadonly(isReadonly: boolean): Promise<void>;
    setIsText(isText: boolean): Promise<void>;
    setIsIdx(isIdx: boolean): Promise<void>;
    setSections(fields: Field[]): Promise<void>;
    setSection(field: Field): Promise<void>;
    setSectionField(n: number): Promise<void>;
    setSectionDraw(b: boolean): Promise<void>;
    setSectionControl(b: boolean): Promise<void>;
    setField(field: Field): Promise<void>;
    setFields(fields: Field[]): Promise<void>;
    setEditField(id: string): Promise<void>;
    clearEditField(): Promise<void>;
    clearSectionField(): Promise<void>;
    modifyField(field: Field): Promise<void>;
    removeSection(id: string): Promise<void>;
    removeSections(): Promise<void>;
    removeField(id: string): Promise<void>;
    removeFields(): Promise<void>;
    getMargin(): number;
    getSections(): EditorTypes.Field[];
    getSectionIdx(): number;
    getSectionLength(): number;
    getSectionField(): EditorTypes.Field;
    getEditField(): EditorTypes.Field;
    getFields(): EditorTypes.Field[];
    getDeg(): number;
    getIsIdx(): boolean;
    getIsText(): boolean;
    setZoomInOut(depth: number): Promise<void>;
    setRotate(deg: number): Promise<void>;
    setCalculatedScale(fit?: FitType, isScroll?: boolean): Promise<void>;
    setScroll(type?: ScrollType): Promise<void>;
    setDraw(drawType: DrawType, field?: Field): Promise<void>;
    downloadImage(): void;
    getCurrenImages(): HTMLCanvasElement;
    addEventListener(e: Event, c: DrawCallback): void;
}
export {};
